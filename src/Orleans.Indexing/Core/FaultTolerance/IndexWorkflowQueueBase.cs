using Orleans.Concurrency;
using Orleans.Runtime;
using Orleans.Storage;
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

namespace Orleans.Indexing
{
    /// <summary>
    /// To minimize the number of RPCs, we process index updates for each grain on the silo where the grain is active. To do this processing, each silo
    /// has one or more <see cref="IndexWorkflowQueueGrainService"/>s for each grain class, up to the number of hardware threads. A GrainService is a grain that
    /// belongs to a specific silo.
    /// + Each of these GrainServices has a queue of workflowRecords, which describe updates that must be propagated to indexes. Each workflowRecord contains
    ///   the following information:
    ///    - workflowID: grainID + a sequence number
    ///    - memberUpdates: the updated values of indexed fields
    ///
    ///   Ordinarily, these workflowRecords are for grains that are active on <see cref="IndexWorkflowQueueGrainService"/>'s silo. (This may not be true for
    ///   short periods when a grain migrates to another silo or after the silo recovers from failure).
    ///
    /// + The <see cref="IndexWorkflowQueueGrainService"/> grain Q has a dictionary updatesOnWait is an in-memory dictionary that maps each grain G to the
    ///   workflowRecords for G that are waiting for be updated.
    /// </summary>
    internal class IndexWorkflowQueueBase : IIndexWorkflowQueue
    {
        //the persistent state of IndexWorkflowQueue, including:
        // - doubly linked list of workflowRecordds
        // - the identity of the IndexWorkflowQueue GrainService
        protected GrainState<IndexWorkflowQueueEntry> queueState;

        //the tail of workflowRecords doubly linked list
        internal IndexWorkflowRecordNode workflowRecordsTail;

        //the grain storage for the index workflow queue
        volatile IGrainStorage StorageProvider;

        int _queueSeqNum;
        Type _grainInterfaceType;
        string _grainTypeName;

        bool HasAnyTotalIndex => GetHasAnyTotalIndex();
        bool? __hasAnyTotalIndex = null;

        bool _isDefinedAsFaultTolerantGrain;
        bool IsFaultTolerant => _isDefinedAsFaultTolerantGrain && HasAnyTotalIndex;

        IIndexWorkflowQueueHandler __handler;
        IIndexWorkflowQueueHandler Handler => InitWorkflowQueueHandler();

        int _isHandlerWorkerIdle;

        /// <summary>
        /// This lock is used to queue all the writes to the storage and do them in a single batch, i.e., group commit
        ///
        /// Works hand-in-hand with pendingWriteRequests and writeRequestIdGen.
        /// </summary>
        AsyncLock _writeLock;

        /// <summary>
        /// Creates a unique ID for each write request to the storage.
        ///
        /// The values generated by this ID generator are used in pendingWriteRequests
        /// </summary>
        int _writeRequestIdGen;

        /// <summary>
        /// All the write requests that are waiting behind write_lock are accumulated
        /// in this data structure, and all of them will be done at once.
        /// </summary>
        HashSet<int> _pendingWriteRequests;

        public const int BATCH_SIZE = int.MaxValue;

        SiloAddress _silo;
        SiloIndexManager SiloIndexManager;
        Lazy<GrainReference> _lazyParent;
        GrainReference _recoveryGrainReference;

        internal IndexWorkflowQueueBase(SiloIndexManager siloIndexManager, Type grainInterfaceType, int queueSequenceNumber, SiloAddress silo,
                                        bool isDefinedAsFaultTolerantGrain, Func<GrainReference> parentFunc, GrainReference recoveryGrainReference = null)
        {
            queueState = new GrainState<IndexWorkflowQueueEntry>(new IndexWorkflowQueueEntry());
            _grainInterfaceType = grainInterfaceType;
            _queueSeqNum = queueSequenceNumber;
            _grainTypeName = "Orleans.Indexing.IndexWorkflowQueue-" + IndexUtils.GetFullTypeName(_grainInterfaceType);

            this.workflowRecordsTail = null;
            __handler = null;
            _isHandlerWorkerIdle = 1;

            _isDefinedAsFaultTolerantGrain = isDefinedAsFaultTolerantGrain;
            this._recoveryGrainReference = recoveryGrainReference;

            _writeLock = new AsyncLock();
            _writeRequestIdGen = 0;
            _pendingWriteRequests = new HashSet<int>();

            _silo = silo;
            SiloIndexManager = siloIndexManager;
            _lazyParent = new Lazy<GrainReference>(parentFunc, true);
        }

        IIndexWorkflowQueueHandler InitWorkflowQueueHandler() =>
            __handler = _lazyParent.Value.GrainId.IsSystemTarget()
                ? SiloIndexManager.GetGrainService<IIndexWorkflowQueueHandler>(IndexWorkflowQueueHandlerBase.CreateIndexWorkflowQueueHandlerGrainReference(SiloIndexManager, _grainInterfaceType, _queueSeqNum, _silo))
                : SiloIndexManager.GrainFactory.GetGrain<IIndexWorkflowQueueHandler>(CreateIndexWorkflowQueuePrimaryKey(_grainInterfaceType, _queueSeqNum));

        async Task EnsureStorage()
        {
            if (this.StorageProvider == null)
            {
                using (await _writeLock.LockAsync())
                {
                    if (this.StorageProvider == null)   // Make sure another thread didn't get it
                    {
                        var readGrainReference = this._recoveryGrainReference ?? _lazyParent.Value;
                        //this.StorageProvider = typeof(IndexWorkflowQueueGrainService).GetGrainStorage(this.SiloIndexManager.ServiceProvider);
                        this.StorageProvider = this.SiloIndexManager.ServiceProvider.GetRequiredService<IGrainStorage>();
                        await this.StorageProvider.ReadStateAsync(_grainTypeName, readGrainReference.GrainId, this.queueState);
                    }
                }
            }
        }

        public async Task AddAllToQueue(Immutable<List<IndexWorkflowRecord>> workflowRecords)
        {
            await this.EnsureStorage();

            // Note: this can be called with an empty enumeration, to just "wake up" the thread in FT recovery.
            var newWorkflows = workflowRecords.Value;
            foreach (var newWorkflow in newWorkflows)
            {
                AddToQueueNonPersistent(newWorkflow);
            }

            InitiateWorkerThread();
            await (IsFaultTolerant ? PersistState() : Task.CompletedTask);
        }

        public async Task AddToQueue(Immutable<IndexWorkflowRecord> workflow)
        {
            await this.EnsureStorage();
            AddToQueueNonPersistent(workflow.Value);
            InitiateWorkerThread();
            await (IsFaultTolerant ? PersistState() : Task.CompletedTask);
        }

        void AddToQueueNonPersistent(IndexWorkflowRecord newWorkflow)
        {
            var newWorkflowNode = new IndexWorkflowRecordNode(newWorkflow);
            if (this.workflowRecordsTail == null) //if the list is empty
            {
                this.workflowRecordsTail = newWorkflowNode;
                queueState.State.WorkflowRecordsHead = newWorkflowNode;
            }
            else // otherwise append to the end of the list
            {
                this.workflowRecordsTail.Append(newWorkflowNode, ref this.workflowRecordsTail);
            }
        }

        public async Task RemoveAllFromQueue(Immutable<List<IndexWorkflowRecord>> workflowRecords)
        {
            await EnsureStorage();
            var newWorkflows = workflowRecords.Value;
            foreach (var newWorkflow in newWorkflows)
            {
                RemoveFromQueueNonPersistent(newWorkflow);
            }
            await (IsFaultTolerant ? PersistState() : Task.CompletedTask);
        }

        void RemoveFromQueueNonPersistent(IndexWorkflowRecord newWorkflow)
        {
            for (var current = queueState.State.WorkflowRecordsHead; current != null; current = current.Next)
            {
                if (newWorkflow.Equals(current.WorkflowRecord))
                {
                    current.Remove(ref queueState.State.WorkflowRecordsHead, ref this.workflowRecordsTail);
                    return;
                }
            }
        }

        void InitiateWorkerThread()
        {
            if (SiloIndexManager.InjectableCode.ShouldRunQueueThread(() => Interlocked.Exchange(ref _isHandlerWorkerIdle, 0) == 1))
            {
                var punctuatedHead = AddPunctuationAt(BATCH_SIZE);
                Handler.HandleWorkflowsUntilPunctuation(punctuatedHead.AsImmutable()).Ignore();
            }
        }

        IndexWorkflowRecordNode AddPunctuationAt(int batchSize)
        {
            if (this.workflowRecordsTail is null)
                throw new WorkflowIndexException("Adding a punctuation to an empty workflow queue is not possible.");

            var punctuationHead = this.queueState.State.WorkflowRecordsHead;
            if (punctuationHead.IsPunctuation)
                throw new WorkflowIndexException("The element at the head of workflow queue cannot be a punctuation.");

            if (batchSize == int.MaxValue)
            {
                var punctuation = this.workflowRecordsTail.AppendPunctuation(ref this.workflowRecordsTail);
                return punctuationHead;
            }

            var punctuationLoc = punctuationHead;

            for (int i = 1; i < batchSize && punctuationLoc.Next != null; ++i)
            {
                punctuationLoc = punctuationLoc.Next;
            }

            punctuationLoc.AppendPunctuation(ref this.workflowRecordsTail);

            return punctuationHead;
        }

        List<IndexWorkflowRecord> RemoveFromQueueUntilPunctuation(IndexWorkflowRecordNode from)
        {
            var workflowRecords = new List<IndexWorkflowRecord>();
            if (from != null && !from.IsPunctuation)
            {
                workflowRecords.Add(from.WorkflowRecord);
            }

            var tmp = from?.Next;
            while (tmp != null && !tmp.IsPunctuation)
            {
                workflowRecords.Add(tmp.WorkflowRecord);
                tmp = tmp.Next;
                tmp.Prev.Clean();
            }

            if (tmp == null)
            {
                from.Remove(ref queueState.State.WorkflowRecordsHead, ref this.workflowRecordsTail);
            }
            else
            {
                from.Next = tmp;
                tmp.Prev = from;
                from.Remove(ref queueState.State.WorkflowRecordsHead, ref this.workflowRecordsTail);
                tmp.Remove(ref queueState.State.WorkflowRecordsHead, ref this.workflowRecordsTail);
            }

            return workflowRecords;
        }

        async Task PersistState()
        {
            //create a write-request ID, which is used for group commit
            int writeRequestId = ++_writeRequestIdGen;

            //add the write-request ID to the pending write requests
            _pendingWriteRequests.Add(writeRequestId);

            //wait before any previous write is done
            using (await _writeLock.LockAsync())
            {
                // If the write request is not there, it was handled by another worker before we obtained the lock.
                if (_pendingWriteRequests.Contains(writeRequestId))
                {
                    //clear all pending write requests, as this attempt will do them all.
                    _pendingWriteRequests.Clear();

                    //write the state back to the storage unconditionally
                    var saveETag = this.queueState.ETag;
                    try
                    {
                        this.queueState.ETag = StorageProviderUtils.ANY_ETAG;
                        await StorageProvider.WriteStateAsync(_grainTypeName, _lazyParent.Value.GrainId, this.queueState);
                    }
                    finally
                    {
                        if (this.queueState.ETag == StorageProviderUtils.ANY_ETAG)
                        {
                            this.queueState.ETag = saveETag;
                        }
                    }
                }
            }
        }

        static Immutable<IndexWorkflowRecordNode> EmptyIndexWorkflowRecordNode = new Immutable<IndexWorkflowRecordNode>(null);

        public Task<Immutable<IndexWorkflowRecordNode>> GiveMoreWorkflowsOrSetAsIdle()
        {
            var removedWorkflows = RemoveFromQueueUntilPunctuation(queueState.State.WorkflowRecordsHead);
            if (IsFaultTolerant)
            {
                //The task of removing the workflow record IDs from the grain runs in parallel with persisting the state. At this point, there
                //is a possibility that some workflow record IDs do not get removed from the indexable grains while the workflow record is removed
                //from the queue. This is fine, because having some dangling workflow IDs in some indexable grains is harmless.
                //TODO: add a garbage collector that runs once in a while and removes the dangling workflow IDs (i.e., the workflow IDs that exist in the
                //      indexable grain, but its corresponding workflow record does not exist in the workflow queue.
                //Task.WhenAll(
                //    RemoveWorkflowRecordsFromIndexableGrains(removedWorkflows),
                this.PersistState(//)
            ).Ignore();
            }

            if (this.workflowRecordsTail == null)
            {
                _isHandlerWorkerIdle = 1;
                return Task.FromResult(EmptyIndexWorkflowRecordNode);
            }
            else
            {
                _isHandlerWorkerIdle = 0;
                return Task.FromResult(AddPunctuationAt(BATCH_SIZE).AsImmutable());
            }
        }

        bool GetHasAnyTotalIndex()
        {
            if (!__hasAnyTotalIndex.HasValue)
            {
                __hasAnyTotalIndex = SiloIndexManager.IndexFactory.GetGrainIndexes(_grainInterfaceType).HasAnyTotalIndex;
            }
            return __hasAnyTotalIndex.Value;
        }

        public async Task<Immutable<List<IndexWorkflowRecord>>> GetRemainingWorkflowsIn(HashSet<Guid> activeWorkflowsSet)
        {
            await this.EnsureStorage();

            var result = new List<IndexWorkflowRecord>();
            for (var current = queueState.State.WorkflowRecordsHead; current != null && !current.IsPunctuation; current = current.Next)
            {
                if (activeWorkflowsSet.Contains(current.WorkflowRecord.WorkflowId))
                {
                    result.Add(current.WorkflowRecord);
                }
            }
            return result.AsImmutable();
        }

        public Task Initialize(IIndexWorkflowQueue oldParentGrainService)
            => throw new NotSupportedException();

        public static GrainReference CreateIndexWorkflowQueueGrainReference(SiloIndexManager siloIndexManager, Type grainInterfaceType, int queueSeqNum, SiloAddress siloAddress)
            => CreateGrainServiceGrainReference(siloIndexManager, grainInterfaceType, queueSeqNum, siloAddress);

        public static string CreateIndexWorkflowQueuePrimaryKey(Type grainInterfaceType, int queueSeqNum)
            => $"{IndexUtils.GetFullTypeName(grainInterfaceType)}-{queueSeqNum}";

        static GrainReference CreateGrainServiceGrainReference(SiloIndexManager siloIndexManager, Type grainInterfaceType, int queueSeqNum, SiloAddress siloAddress)
            => siloIndexManager.MakeGrainServiceGrainReference(
                typeData: IndexingConstants.INDEX_WORKFLOW_QUEUE_GRAIN_SERVICE_TYPE_CODE,
                systemGrainId: CreateIndexWorkflowQueuePrimaryKey(grainInterfaceType, queueSeqNum),
                siloAddress: siloAddress);

        public static IIndexWorkflowQueue GetIndexWorkflowQueueFromGrainHashCode(SiloIndexManager siloIndexManager, Type grainInterfaceType, int grainHashCode, SiloAddress siloAddress)
        {
            var queueSeqNum = StorageProviderUtils.PositiveHash(grainHashCode, siloIndexManager.NumWorkflowQueuesPerInterface);
            var grainReference = CreateGrainServiceGrainReference(siloIndexManager, grainInterfaceType, queueSeqNum, siloAddress);
            return siloIndexManager.GetGrainService<IIndexWorkflowQueue>(grainReference);
        }
    }

    internal class StorageProviderUtils
    {
        public const string ANY_ETAG = "*";

        public static int PositiveHash(int hash, int hashRange)
        {
            var positiveHash = ((hash % hashRange) + hashRange) % hashRange;
            return positiveHash;
        }
    }
}
